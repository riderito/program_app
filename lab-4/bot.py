import os  # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏—è
import logging  # –î–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–±—ã—Ç–∏–π (–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
from typing import Dict  # –î–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤ —Å–ª–æ–≤–∞—Ä—è

from aiogram import Bot, Dispatcher  # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
from aiogram.filters import Command  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Ç–∏–ø–∞ /start, /save_currency
from aiogram.fsm.context import FSMContext  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
from aiogram.fsm.state import State, StatesGroup  # –î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
from aiogram.types import Message  # –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫—É—Ä—Å—ã)
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("API_TOKEN")

# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
# –°–æ–∑–¥–∞—ë–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç (—É –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî —Å–≤–æ–π —Å–ª–æ–≤–∞—Ä—å)
# –°–ª–æ–≤–∞—Ä—å –∏–º–µ–µ—Ç –≤–∏–¥ {user_id: {"USD": 90.5, "EUR": 100.1, ...}}
user_currencies: Dict[int, Dict[str, float]] = {}


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /save_currency
class SaveCurrencyStates(StatesGroup):
    waiting_for_name = State()  # –ñ–¥—ë–º, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–¥—ë—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
    waiting_for_rate = State()  # –ñ–¥—ë–º –∫—É—Ä—Å —ç—Ç–æ–π –≤–∞–ª—é—Ç—ã

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /convert
class ConvertCurrencyStates(StatesGroup):
    waiting_for_currency = State()  # –ñ–¥—ë–º, –∫–∞–∫—É—é –≤–∞–ª—é—Ç—É –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
    waiting_for_amount = State()  # –ñ–¥—ë–º —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: Message) -> None:
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç!ü§ó\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /save_currency, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã.\n"
        "–ê –∫–æ–º–∞–Ω–¥—É /convert ‚Äî —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é."
    )


# –ö–æ–º–∞–Ω–¥–∞ /save_currency
@dp.message(Command("save_currency"))
async def save_currency(message: Message, state: FSMContext) -> None:
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, USD –∏–ª–∏ EUR):")
    await state.set_state(SaveCurrencyStates.waiting_for_name) # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã
@dp.message(SaveCurrencyStates.waiting_for_name)
async def currency_name(message: Message, state: FSMContext) -> None:
    currency = message.text.upper().strip()  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É (usd –≤ USD)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, –¥–ª–∏–Ω–∞ –æ—Ç 2 –¥–æ 5
    if not currency.isalpha() or not (2 <= len(currency) <= 5):
        await message.answer(
            "‚õî –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã (–æ—Ç 2 –¥–æ 5 —Å–∏–º–≤–æ–ª–æ–≤)."
        )
        return

    await state.update_data(currency_name=currency)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    await message.answer(f"ü™ô –í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å {currency} –∫ —Ä—É–±–ª—é:")
    await state.set_state(SaveCurrencyStates.waiting_for_rate)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã
@dp.message(SaveCurrencyStates.waiting_for_rate)
async def currency_rate(message: Message, state: FSMContext) -> None:
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–æ–¥ –≤ —á–∏—Å–ª–æ –∏ –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
        rate = float(message.text.replace(",", "."))
        if rate <= 0:
            raise ValueError("‚õî –ö—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
        data = await state.get_data()
        currency = data["currency_name"]
        user_id = message.from_user.id

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—É—Ä—Å –≤–ø–µ—Ä–≤—ã–µ, c–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        user_currencies.setdefault(user_id, {})[currency] = rate
        # –î–µ–ª–∞–µ–º –ª–æ–≥ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ—Ö—Ä–∞–Ω–∏–ª –∫—É—Ä—Å: 1 {currency} = {rate} RUB")

        await message.answer(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: 1 {currency} = {rate:.2f} RUB")
        await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM (—Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ)

    except ValueError:
        await message.answer("‚õî –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π –∫—É—Ä—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 95.5):")



# –ö–æ–º–∞–Ω–¥–∞ /convert
@dp.message(Command("convert"))
async def convert(message: Message, state: FSMContext) -> None:
    await message.answer("ü§ë –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, USD –∏–ª–∏ EUR):")
    await state.set_state(ConvertCurrencyStates.waiting_for_currency)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
@dp.message(ConvertCurrencyStates.waiting_for_currency)
async def convert_currency(message: Message, state: FSMContext) -> None:
    currency = message.text.upper().strip()
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã –∏ –Ω—É–∂–Ω–∞—è –∏–∑ –Ω–∏—Ö
    if user_id in user_currencies and currency in user_currencies[user_id]:
        await state.update_data(currency=currency)
        await message.answer(f"üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ {currency}, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:")
        await state.set_state(ConvertCurrencyStates.waiting_for_amount)
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in user_currencies and user_currencies[user_id]:
            available = "\n".join(
                f"‚Ä¢ {cur} = {rate:.2f} RUB"
                for cur, rate in user_currencies[user_id].items()
            )
            await message.answer(
                f"‚õî –í–∞–ª—é—Ç–∞ {currency} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
                f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏:\n\n{available}"
            )
        else:
            await message.answer(
                f"‚õî –í–∞–ª—é—Ç–∞ {currency} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
                f"–í—ã –µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /save_currency."
            )
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
@dp.message(ConvertCurrencyStates.waiting_for_amount)
async def convert_amount(message: Message, state: FSMContext) -> None:
    try:
        amount = float(message.text.replace(",", "."))
        if amount <= 0:
            raise ValueError("‚õî –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")

        user_id = message.from_user.id
        data = await state.get_data()
        currency = data["currency"]
        rate = user_currencies[user_id][currency]
        result = amount * rate

        await message.answer(
            f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è:\n"
            f"{amount:.2f} {currency} = {result:.2f} RUB\n"
            f"–ö—É—Ä—Å: 1 {currency} = {rate:.2f} RUB"
        )
        await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM

    except ValueError:
        await message.answer("‚õî –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10 –∏–ª–∏ 5.5):")


async def main() -> None:
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –æ–ø—Ä–æ—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–¥
    asyncio.run(main())
