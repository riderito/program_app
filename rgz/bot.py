import os # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏—è
import logging # –î–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–±—ã—Ç–∏–π (–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
from datetime import datetime # –†–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º
from aiogram import Bot, Dispatcher, types, F # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –±–æ—Ç–∞
from aiogram.filters import Command # –§–∏–ª—å—Ç—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
from aiogram.fsm.context import FSMContext # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
from aiogram.fsm.state import State, StatesGroup # –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
import psycopg2 # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å PostgreSQL
import httpx # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π HTTP-–∫–ª–∏–µ–Ω—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –≤–Ω–µ—à–Ω–∏–º API

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: –≤—ã–≤–æ–¥–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("API_TOKEN")

# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
# –°–æ–∑–¥–∞—ë–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥)
dp = Dispatcher()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    return psycopg2.connect(
        host="localhost",
        port=5432,
        database="rpp_rgz",
        user="postgres",
        password="postgres"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥"""
    chat_id = message.chat.id

    try:
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute("SELECT name FROM users WHERE chat_id = %s", (chat_id,))
                user = cursor.fetchone()

                if user:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
                    username = user[0]
                    welcome_text = (
                        f"üëã –ü—Ä–∏–≤–µ—Ç, {username}!\n"
                        "–Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
                        "üìå –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                        "/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é\n"
                        "/reg - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (—É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞)\n"
                        "/add_operation - –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é (–¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥)\n"
                        "/operations - –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π\n\n"
                        "üí° –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é."
                    )
                else:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
                    welcome_text = (
                        "üëã –ü—Ä–∏–≤–µ—Ç, –Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü!\n"
                        "–Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n\n"
                        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                        "/reg - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ\n\n"
                        "–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∞–º —Å—Ç–∞–Ω—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã:\n"
                        "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π (/add_operation)\n"
                        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π (/operations)\n\n"
                        "–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /reg"
                    )

                await message.answer(welcome_text)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω—é
        commands = [
            types.BotCommand(command="start", description="–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"),
            types.BotCommand(command="reg", description="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"),
            types.BotCommand(command="add_operation", description="–î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é"),
            types.BotCommand(command="operations", description="–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π")
        ]
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–º—É –∏–º–µ–Ω–Ω–æ —á–∞—Ç—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫
        scope = types.BotCommandScopeChat(chat_id=message.chat.id)
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
        await bot.set_my_commands(commands, scope=scope)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è (—ç—Ç–∞–ø—ã) –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationStates(StatesGroup):
    waiting_for_name = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reg - –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.message(Command("reg"))
async def cmd_reg(message: types.Message, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º id —á–∞—Ç–∞, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    chat_id = message.chat.id

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("SELECT id FROM users WHERE chat_id = %s", (chat_id,))
                if cursor.fetchone() is not None:
                    await message.answer("‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
                    return

        # –ï—Å–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –ª–æ–≥–∏–Ω
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞
        await state.set_state(RegistrationStates.waiting_for_name)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞ (—Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /reg)
@dp.message(RegistrationStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    name = message.text.strip()  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–≥–∏–Ω –Ω–µ –ø—É—Å—Ç–æ–π
    if not name:
        await message.answer("‚ùå –õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ª–æ–≥–∏–Ω–∞
    if len(name) > 100:
        await message.answer("‚ùå –õ–æ–≥–∏–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "INSERT INTO users (chat_id, name) VALUES (%s, %s)",
                    (chat_id, name)
                )
                conn.commit() # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await message.answer(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, {name}!\n"
                             "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ - /add_operation")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    # –í–æ–∑–Ω–∏–∫–∞–µ—Ç –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ë–î
    except psycopg2.IntegrityError:
        await message.answer("‚ùå –≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π:")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()


# –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
class AddOperationStates(StatesGroup):
    waiting_for_type = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
    waiting_for_amount = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    waiting_for_date = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_operation - –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
@dp.message(Command("add_operation"))
async def cmd_add_operation(message: types.Message, state: FSMContext):
    chat_id = message.chat.id

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("SELECT id FROM users WHERE chat_id = %s", (chat_id,))
                if cursor.fetchone() is None:
                    await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /reg")
                    return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="–î–û–•–û–î")],
                [types.KeyboardButton(text="–†–ê–°–•–û–î")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )

        await message.answer("üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:", reply_markup=keyboard)
        await state.set_state(AddOperationStates.waiting_for_type)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
@dp.message(AddOperationStates.waiting_for_type, F.text.in_(["–î–û–•–û–î", "–†–ê–°–•–û–î"]))
async def process_operation_type(message: types.Message, state: FSMContext):
    await state.update_data(type_operation=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
    await message.answer("üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ä—É–±–ª—è—Ö:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(AddOperationStates.waiting_for_amount)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
@dp.message(AddOperationStates.waiting_for_type)
async def wrong_operation_type(message: types.Message):
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–æ–π:")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
@dp.message(AddOperationStates.waiting_for_amount)
async def process_operation_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.replace(',', '.'))  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –∑–∞–ø—è—Ç—ã—Ö, –∏ —Ç–æ—á–µ–∫
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        await state.update_data(sum=amount)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É
        await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2025):")
        await state.set_state(AddOperationStates.waiting_for_date)

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
@dp.message(AddOperationStates.waiting_for_date)
async def process_operation_date(message: types.Message, state: FSMContext):
    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –≤ –¥–∞—Ç—É –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
        date = datetime.strptime(message.text, "%d.%m.%Y").date()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        chat_id = message.chat.id

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –ë–î
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "INSERT INTO operations (date, sum, chat_id, type_operation) VALUES (%s, %s, %s, %s)",
                    (date, data['sum'], chat_id, data['type_operation'])
                )
                conn.commit()

        await message.answer(f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
                             f"–¢–∏–ø: {data['type_operation']}\n"
                             f"–°—É–º–º–∞: {round(data['sum'], 2)} —Ä—É–±.\n"
                             f"–î–∞—Ç–∞: {date.strftime('%d.%m.%Y')}")
        await state.clear()

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")


# –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
class OperationsStates(StatesGroup):
    waiting_for_sort_column = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    waiting_for_sort_direction = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    waiting_for_currency = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã


# URL –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
EXCHANGE_SERVICE_URL = "http://127.0.0.1:5000/rate"


# –ü—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –ø–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã –æ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
async def get_exchange_rate(currency: str) -> float:
    try:
        # –°–æ–∑–¥–∞—ë—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π HTTP-–∫–ª–∏–µ–Ω—Ç
        async with httpx.AsyncClient() as client:
            response = await client.get(
                EXCHANGE_SERVICE_URL, # URL —Å–µ—Ä–≤–∏—Å–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
                params={"currency": currency}, # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
                timeout=5.0 # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
            )

            if response.status_code == 200:
                return response.json()["rate"]
            elif response.status_code == 400:
                raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞")
            else:
                raise ValueError("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –∫—É—Ä—Å–æ–≤")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {e}")
        raise


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /operations - –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
@dp.message(Command("operations"))
async def cmd_operations(message: types.Message, state: FSMContext):
    chat_id = message.chat.id

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("SELECT id FROM users WHERE chat_id = %s", (chat_id,))
                if cursor.fetchone() is None:
                    await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /reg")
                    return

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–æ–Ω–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        columns_keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="–î–ê–¢–ê")],
                [types.KeyboardButton(text="–°–£–ú–ú–ê")],
                [types.KeyboardButton(text="–¢–ò–ü –û–ü–ï–†–ê–¶–ò–ò")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )

        await message.answer("üìä –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:", reply_markup=columns_keyboard)
        await state.set_state(OperationsStates.waiting_for_sort_column)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
@dp.message(
    OperationsStates.waiting_for_sort_column,
    F.text.in_(["–î–ê–¢–ê", "–°–£–ú–ú–ê", "–¢–ò–ü –û–ü–ï–†–ê–¶–ò–ò"])
)
async def process_sort_column(message: types.Message, state: FSMContext):
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–æ–ª–æ–Ω–∫–∏
    column_mapping = {
        "–î–ê–¢–ê": "date",
        "–°–£–ú–ú–ê": "sum",
        "–¢–ò–ü –û–ü–ï–†–ê–¶–ò–ò": "type_operation"
    }

    await state.update_data(sort_column=column_mapping[message.text])

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    direction_keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ü–û –£–ë–´–í–ê–ù–ò–Æ")],
            [types.KeyboardButton(text="–ü–û –í–û–ó–†–ê–°–¢–ê–ù–ò–Æ")]
        ],
        resize_keyboard=True,
        # C–∫—Ä—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞ –ø–æ—Å–ª–µ –µ—ë –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        one_time_keyboard=True
    )

    await message.answer(
        "üîª –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:",
        reply_markup=direction_keyboard
    )
    await state.set_state(OperationsStates.waiting_for_sort_direction)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–æ–Ω–∫–∏
@dp.message(OperationsStates.waiting_for_sort_column)
async def wrong_sort_column(message: types.Message):
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∫–Ω–æ–ø–∫–æ–π:")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
@dp.message(
    OperationsStates.waiting_for_sort_direction,
    F.text.in_(["–ü–û –£–ë–´–í–ê–ù–ò–Æ", "–ü–û –í–û–ó–†–ê–°–¢–ê–ù–ò–Æ"])
)
async def process_sort_direction(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    sort_direction = "DESC" if message.text == "–ü–û –£–ë–´–í–ê–ù–ò–Æ" else "ASC"
    await state.update_data(sort_direction=sort_direction)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
    currency_keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="RUB")],
            [types.KeyboardButton(text="EUR")],
            [types.KeyboardButton(text="USD")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(
        "üí± –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
        reply_markup=currency_keyboard
    )
    await state.set_state(OperationsStates.waiting_for_currency)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
@dp.message(OperationsStates.waiting_for_sort_direction)
async def wrong_sort_direction(message: types.Message):
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∫–Ω–æ–ø–∫–æ–π:")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –∏ –≤—ã–≤–æ–¥–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
@dp.message(OperationsStates.waiting_for_currency, F.text.in_(["RUB", "EUR", "USD"]))
async def process_currency(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    currency = message.text
    data = await state.get_data()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ –ë–î —Å —É—á–µ—Ç–æ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    f"SELECT date, sum, type_operation FROM operations "
                    f"WHERE chat_id = %s ORDER BY {data['sort_column']} {data['sort_direction']}",
                    (chat_id,)
                )
                operations = cursor.fetchall()

        if not operations:
            await message.answer(
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π",
                reply_markup=types.ReplyKeyboardRemove() # –Ø–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            )
            await state.clear()
            return

        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        rate = 1.0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è RUB
        if currency != "RUB":
            try:
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫—É—Ä—Å —É —Å–µ—Ä–≤–∏—Å–∞ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é
                rate = float(await get_exchange_rate(currency))
            except Exception:
                await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å {currency}. –ü–æ–∫–∞–∑—ã–≤–∞—é –≤ RUB")
                currency = "RUB"

        # –î–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫
        column_names = {
            "date": "–¥–∞—Ç–µ",
            "sum": "—Å—É–º–º–µ",
            "type_operation": "—Ç–∏–ø—É –æ–ø–µ—Ä–∞—Ü–∏–∏"
        }

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
        response = [
            f"üìä –í–∞—à–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–≤ {currency}), –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ {column_names[data['sort_column']]} "
            f"({'–ø–æ —É–±—ã–≤–∞–Ω–∏—é' if data['sort_direction'] == 'DESC' else '–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é'}):\n"
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
        for op in operations:
            date, amount, op_type = op
            converted_amount = round(float(amount) / rate, 2)

            response.append(
                f"{date.strftime('%d.%m.%Y')} - "
                f"{converted_amount} {currency} - "
                f"{op_type}"
            )

        await message.answer("\n".join(response), reply_markup=types.ReplyKeyboardRemove())
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–π")
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –≤–∞–ª—é—Ç—ã
@dp.message(OperationsStates.waiting_for_currency)
async def wrong_currency(message: types.Message):
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∫–Ω–æ–ø–∫–æ–π:")


# –û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –æ–ø—Ä–æ—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é main()
    asyncio.run(main())
